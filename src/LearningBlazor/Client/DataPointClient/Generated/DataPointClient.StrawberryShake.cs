// <auto-generated/>
#nullable enable

namespace LearningBlazor.Client.DataPoint
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class CreateDataPointResult : global::System.IEquatable<CreateDataPointResult>, ICreateDataPointResult
    {
        public CreateDataPointResult(global::LearningBlazor.Client.DataPoint.ICreateDataPoint_CreateDataPoint? createDataPoint)
        {
            CreateDataPoint = createDataPoint;
        }

        public global::LearningBlazor.Client.DataPoint.ICreateDataPoint_CreateDataPoint? CreateDataPoint { get; }

        public virtual global::System.Boolean Equals(CreateDataPointResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CreateDataPoint is null && other.CreateDataPoint is null) || CreateDataPoint != null && CreateDataPoint.Equals(other.CreateDataPoint)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateDataPointResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CreateDataPoint != null)
                {
                    hash ^= 397 * CreateDataPoint.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class CreateDataPoint_CreateDataPoint_DataPoint : global::System.IEquatable<CreateDataPoint_CreateDataPoint_DataPoint>, ICreateDataPoint_CreateDataPoint_DataPoint
    {
        public CreateDataPoint_CreateDataPoint_DataPoint(global::System.String name, global::System.String createdAt, global::System.Int32? @value)
        {
            Name = name;
            CreatedAt = createdAt;
            Value = @value;
        }

        public global::System.String Name { get; }

        public global::System.String CreatedAt { get; }

        public global::System.Int32? Value { get; }

        public virtual global::System.Boolean Equals(CreateDataPoint_CreateDataPoint_DataPoint? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name)) && CreatedAt.Equals(other.CreatedAt) && Value == other.Value;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateDataPoint_CreateDataPoint_DataPoint)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * CreatedAt.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface ICreateDataPointResult
    {
        public global::LearningBlazor.Client.DataPoint.ICreateDataPoint_CreateDataPoint? CreateDataPoint { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface ICreateDataPoint_CreateDataPoint
    {
        public global::System.String Name { get; }

        public global::System.String CreatedAt { get; }

        public global::System.Int32? Value { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface ICreateDataPoint_CreateDataPoint_DataPoint : ICreateDataPoint_CreateDataPoint
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class ListDataPointsResult : global::System.IEquatable<ListDataPointsResult>, IListDataPointsResult
    {
        public ListDataPointsResult(global::LearningBlazor.Client.DataPoint.IListDataPoints_ListDataPoints? listDataPoints)
        {
            ListDataPoints = listDataPoints;
        }

        public global::LearningBlazor.Client.DataPoint.IListDataPoints_ListDataPoints? ListDataPoints { get; }

        public virtual global::System.Boolean Equals(ListDataPointsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ListDataPoints is null && other.ListDataPoints is null) || ListDataPoints != null && ListDataPoints.Equals(other.ListDataPoints)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListDataPointsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ListDataPoints != null)
                {
                    hash ^= 397 * ListDataPoints.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class ListDataPoints_ListDataPoints_DataPointConnection : global::System.IEquatable<ListDataPoints_ListDataPoints_DataPointConnection>, IListDataPoints_ListDataPoints_DataPointConnection
    {
        public ListDataPoints_ListDataPoints_DataPointConnection(global::System.Collections.Generic.IReadOnlyList<global::LearningBlazor.Client.DataPoint.IListDataPoints_ListDataPoints_Items?>? items)
        {
            Items = items;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::LearningBlazor.Client.DataPoint.IListDataPoints_ListDataPoints_Items?>? Items { get; }

        public virtual global::System.Boolean Equals(ListDataPoints_ListDataPoints_DataPointConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Items, other.Items));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListDataPoints_ListDataPoints_DataPointConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Items != null)
                {
                    foreach (var Items_elm in Items)
                    {
                        if (Items_elm != null)
                        {
                            hash ^= 397 * Items_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class ListDataPoints_ListDataPoints_Items_DataPoint : global::System.IEquatable<ListDataPoints_ListDataPoints_Items_DataPoint>, IListDataPoints_ListDataPoints_Items_DataPoint
    {
        public ListDataPoints_ListDataPoints_Items_DataPoint(global::System.String name, global::System.String createdAt, global::System.Int32? @value)
        {
            Name = name;
            CreatedAt = createdAt;
            Value = @value;
        }

        public global::System.String Name { get; }

        public global::System.String CreatedAt { get; }

        public global::System.Int32? Value { get; }

        public virtual global::System.Boolean Equals(ListDataPoints_ListDataPoints_Items_DataPoint? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name)) && CreatedAt.Equals(other.CreatedAt) && Value == other.Value;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListDataPoints_ListDataPoints_Items_DataPoint)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * CreatedAt.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IListDataPointsResult
    {
        public global::LearningBlazor.Client.DataPoint.IListDataPoints_ListDataPoints? ListDataPoints { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IListDataPoints_ListDataPoints
    {
        public global::System.Collections.Generic.IReadOnlyList<global::LearningBlazor.Client.DataPoint.IListDataPoints_ListDataPoints_Items?>? Items { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IListDataPoints_ListDataPoints_DataPointConnection : IListDataPoints_ListDataPoints
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IListDataPoints_ListDataPoints_Items
    {
        public global::System.String Name { get; }

        public global::System.String CreatedAt { get; }

        public global::System.Int32? Value { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IListDataPoints_ListDataPoints_Items_DataPoint : IListDataPoints_ListDataPoints_Items
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class CreateDataPointInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _aWSDateTimeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        public global::System.String TypeName => "CreateDataPointInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _aWSDateTimeFormatter = serializerResolver.GetInputValueFormatter("AWSDateTime");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::LearningBlazor.Client.DataPoint.CreateDataPointInput;
            var inputInfo = runtimeValue as global::LearningBlazor.Client.DataPoint.State.ICreateDataPointInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsCreatedAtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("createdAt", FormatCreatedAt(input.CreatedAt)));
            }

            if (inputInfo.IsValueSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("value", FormatValue(input.Value)));
            }

            return fields;
        }

        private global::System.Object? FormatName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _iDFormatter.Format(input);
        }

        private global::System.Object? FormatCreatedAt(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _aWSDateTimeFormatter.Format(input);
        }

        private global::System.Object? FormatValue(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class CreateDataPointInput : global::LearningBlazor.Client.DataPoint.State.ICreateDataPointInputInfo, global::System.IEquatable<CreateDataPointInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateDataPointInput)obj);
        }

        public virtual global::System.Boolean Equals(CreateDataPointInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name)) && CreatedAt.Equals(other.CreatedAt) && Value == other.Value;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * CreatedAt.GetHashCode();
                if (Value != null)
                {
                    hash ^= 397 * Value.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String _value_name = default !;
        private global::System.Boolean _set_name;
        private global::System.String _value_createdAt = default !;
        private global::System.Boolean _set_createdAt;
        private global::System.Int32? _value_value;
        private global::System.Boolean _set_value;
        public global::System.String Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::LearningBlazor.Client.DataPoint.State.ICreateDataPointInputInfo.IsNameSet => _set_name;
        public global::System.String CreatedAt
        {
            get => _value_createdAt;
            set
            {
                _set_createdAt = true;
                _value_createdAt = value;
            }
        }

        global::System.Boolean global::LearningBlazor.Client.DataPoint.State.ICreateDataPointInputInfo.IsCreatedAtSet => _set_createdAt;
        public global::System.Int32? Value
        {
            get => _value_value;
            set
            {
                _set_value = true;
                _value_value = value;
            }
        }

        global::System.Boolean global::LearningBlazor.Client.DataPoint.State.ICreateDataPointInputInfo.IsValueSet => _set_value;
    }

    /// <summary>
    /// Represents the operation service of the CreateDataPoint GraphQL operation
    /// <code>
    /// mutation CreateDataPoint($createdatapointinput: CreateDataPointInput!) {
    ///   createDataPoint(input: $createdatapointinput) {
    ///     __typename
    ///     name
    ///     createdAt
    ///     value
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class CreateDataPointMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateDataPointMutationDocument()
        {
        }

        public static CreateDataPointMutationDocument Instance { get; } = new CreateDataPointMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x28, 0x24, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "39ef91e4faa00844403c5bbb305734e0");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateDataPoint GraphQL operation
    /// <code>
    /// mutation CreateDataPoint($createdatapointinput: CreateDataPointInput!) {
    ///   createDataPoint(input: $createdatapointinput) {
    ///     __typename
    ///     name
    ///     createdAt
    ///     value
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class CreateDataPointMutation : global::LearningBlazor.Client.DataPoint.ICreateDataPointMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateDataPointResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _createDataPointInputFormatter;
        public CreateDataPointMutation(global::StrawberryShake.IOperationExecutor<ICreateDataPointResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _createDataPointInputFormatter = serializerResolver.GetInputValueFormatter("CreateDataPointInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateDataPointResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateDataPointResult>> ExecuteAsync(global::LearningBlazor.Client.DataPoint.CreateDataPointInput createdatapointinput, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(createdatapointinput);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateDataPointResult>> Watch(global::LearningBlazor.Client.DataPoint.CreateDataPointInput createdatapointinput, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(createdatapointinput);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::LearningBlazor.Client.DataPoint.CreateDataPointInput createdatapointinput)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("createdatapointinput", FormatCreatedatapointinput(createdatapointinput));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateDataPointMutationDocument.Instance.Hash.Value, name: "CreateDataPoint", document: CreateDataPointMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCreatedatapointinput(global::LearningBlazor.Client.DataPoint.CreateDataPointInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _createDataPointInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateDataPoint GraphQL operation
    /// <code>
    /// mutation CreateDataPoint($createdatapointinput: CreateDataPointInput!) {
    ///   createDataPoint(input: $createdatapointinput) {
    ///     __typename
    ///     name
    ///     createdAt
    ///     value
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface ICreateDataPointMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateDataPointResult>> ExecuteAsync(global::LearningBlazor.Client.DataPoint.CreateDataPointInput createdatapointinput, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateDataPointResult>> Watch(global::LearningBlazor.Client.DataPoint.CreateDataPointInput createdatapointinput, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ListDataPoints GraphQL operation
    /// <code>
    /// query ListDataPoints {
    ///   listDataPoints {
    ///     __typename
    ///     items {
    ///       __typename
    ///       name
    ///       createdAt
    ///       value
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class ListDataPointsQueryDocument : global::StrawberryShake.IDocument
    {
        private ListDataPointsQueryDocument()
        {
        }

        public static ListDataPointsQueryDocument Instance { get; } = new ListDataPointsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "d9b5a39bebc0f5af9797076aa818c121");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ListDataPoints GraphQL operation
    /// <code>
    /// query ListDataPoints {
    ///   listDataPoints {
    ///     __typename
    ///     items {
    ///       __typename
    ///       name
    ///       createdAt
    ///       value
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class ListDataPointsQuery : global::LearningBlazor.Client.DataPoint.IListDataPointsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IListDataPointsResult> _operationExecutor;
        public ListDataPointsQuery(global::StrawberryShake.IOperationExecutor<IListDataPointsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IListDataPointsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IListDataPointsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IListDataPointsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ListDataPointsQueryDocument.Instance.Hash.Value, name: "ListDataPoints", document: ListDataPointsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the ListDataPoints GraphQL operation
    /// <code>
    /// query ListDataPoints {
    ///   listDataPoints {
    ///     __typename
    ///     items {
    ///       __typename
    ///       name
    ///       createdAt
    ///       value
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IListDataPointsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IListDataPointsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IListDataPointsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the DataPointClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class DataPointClient : global::LearningBlazor.Client.DataPoint.IDataPointClient
    {
        private readonly global::LearningBlazor.Client.DataPoint.ICreateDataPointMutation _createDataPoint;
        private readonly global::LearningBlazor.Client.DataPoint.IListDataPointsQuery _listDataPoints;
        public DataPointClient(global::LearningBlazor.Client.DataPoint.ICreateDataPointMutation createDataPoint, global::LearningBlazor.Client.DataPoint.IListDataPointsQuery listDataPoints)
        {
            _createDataPoint = createDataPoint ?? throw new global::System.ArgumentNullException(nameof(createDataPoint));
            _listDataPoints = listDataPoints ?? throw new global::System.ArgumentNullException(nameof(listDataPoints));
        }

        public static global::System.String ClientName => "DataPointClient";
        public global::LearningBlazor.Client.DataPoint.ICreateDataPointMutation CreateDataPoint => _createDataPoint;
        public global::LearningBlazor.Client.DataPoint.IListDataPointsQuery ListDataPoints => _listDataPoints;
    }

    /// <summary>
    /// Represents the DataPointClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IDataPointClient
    {
        global::LearningBlazor.Client.DataPoint.ICreateDataPointMutation CreateDataPoint { get; }

        global::LearningBlazor.Client.DataPoint.IListDataPointsQuery ListDataPoints { get; }
    }
}

namespace LearningBlazor.Client.DataPoint.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class CreateDataPointResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::LearningBlazor.Client.DataPoint.CreateDataPointResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateDataPointResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::LearningBlazor.Client.DataPoint.ICreateDataPointResult);
        public CreateDataPointResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateDataPointResultInfo info)
            {
                return new CreateDataPointResult(MapICreateDataPoint_CreateDataPoint(info.CreateDataPoint, snapshot));
            }

            throw new global::System.ArgumentException("CreateDataPointResultInfo expected.");
        }

        private global::LearningBlazor.Client.DataPoint.ICreateDataPoint_CreateDataPoint? MapICreateDataPoint_CreateDataPoint(global::LearningBlazor.Client.DataPoint.State.DataPointData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICreateDataPoint_CreateDataPoint returnValue = default !;
            if (data?.__typename.Equals("DataPoint", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CreateDataPoint_CreateDataPoint_DataPoint(data.Name ?? throw new global::System.ArgumentNullException(), data.CreatedAt ?? throw new global::System.ArgumentNullException(), data.Value);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class CreateDataPointResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateDataPointResultInfo(global::LearningBlazor.Client.DataPoint.State.DataPointData? createDataPoint, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateDataPoint = createDataPoint;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::LearningBlazor.Client.DataPoint.State.DataPointData? CreateDataPoint { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateDataPointResultInfo(CreateDataPoint, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class ListDataPointsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::LearningBlazor.Client.DataPoint.ListDataPointsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ListDataPointsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::LearningBlazor.Client.DataPoint.IListDataPointsResult);
        public ListDataPointsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ListDataPointsResultInfo info)
            {
                return new ListDataPointsResult(MapIListDataPoints_ListDataPoints(info.ListDataPoints, snapshot));
            }

            throw new global::System.ArgumentException("ListDataPointsResultInfo expected.");
        }

        private global::LearningBlazor.Client.DataPoint.IListDataPoints_ListDataPoints? MapIListDataPoints_ListDataPoints(global::LearningBlazor.Client.DataPoint.State.DataPointConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IListDataPoints_ListDataPoints returnValue = default !;
            if (data?.__typename.Equals("DataPointConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ListDataPoints_ListDataPoints_DataPointConnection(MapIListDataPoints_ListDataPoints_ItemsArray(data.Items, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::LearningBlazor.Client.DataPoint.IListDataPoints_ListDataPoints_Items?>? MapIListDataPoints_ListDataPoints_ItemsArray(global::System.Collections.Generic.IReadOnlyList<global::LearningBlazor.Client.DataPoint.State.DataPointData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var dataPoints = new global::System.Collections.Generic.List<global::LearningBlazor.Client.DataPoint.IListDataPoints_ListDataPoints_Items?>();
            foreach (global::LearningBlazor.Client.DataPoint.State.DataPointData? child in list)
            {
                dataPoints.Add(MapIListDataPoints_ListDataPoints_Items(child, snapshot));
            }

            return dataPoints;
        }

        private global::LearningBlazor.Client.DataPoint.IListDataPoints_ListDataPoints_Items? MapIListDataPoints_ListDataPoints_Items(global::LearningBlazor.Client.DataPoint.State.DataPointData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IListDataPoints_ListDataPoints_Items returnValue = default !;
            if (data?.__typename.Equals("DataPoint", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ListDataPoints_ListDataPoints_Items_DataPoint(data.Name ?? throw new global::System.ArgumentNullException(), data.CreatedAt ?? throw new global::System.ArgumentNullException(), data.Value);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class ListDataPointsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ListDataPointsResultInfo(global::LearningBlazor.Client.DataPoint.State.DataPointConnectionData? listDataPoints, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ListDataPoints = listDataPoints;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::LearningBlazor.Client.DataPoint.State.DataPointConnectionData? ListDataPoints { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ListDataPointsResultInfo(ListDataPoints, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    internal interface ICreateDataPointInputInfo
    {
        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsCreatedAtSet { get; }

        global::System.Boolean IsValueSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class CreateDataPointBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::LearningBlazor.Client.DataPoint.ICreateDataPointResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::LearningBlazor.Client.DataPoint.ICreateDataPointResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _aWSDateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public CreateDataPointBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::LearningBlazor.Client.DataPoint.ICreateDataPointResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _aWSDateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("AWSDateTime") ?? throw new global::System.ArgumentException("No serializer for type `AWSDateTime` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateDataPointResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateDataPointResult Result, CreateDataPointResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICreateDataPointResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateDataPointResult, CreateDataPointResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateDataPointResultInfo(DeserializeICreateDataPoint_CreateDataPoint(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createDataPoint")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::LearningBlazor.Client.DataPoint.State.DataPointData? DeserializeICreateDataPoint_CreateDataPoint(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DataPoint", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::LearningBlazor.Client.DataPoint.State.DataPointData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), createdAt: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), @value: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class ListDataPointsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::LearningBlazor.Client.DataPoint.IListDataPointsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::LearningBlazor.Client.DataPoint.IListDataPointsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _aWSDateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public ListDataPointsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::LearningBlazor.Client.DataPoint.IListDataPointsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _aWSDateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("AWSDateTime") ?? throw new global::System.ArgumentException("No serializer for type `AWSDateTime` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IListDataPointsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IListDataPointsResult Result, ListDataPointsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IListDataPointsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IListDataPointsResult, ListDataPointsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ListDataPointsResultInfo(DeserializeIListDataPoints_ListDataPoints(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "listDataPoints")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::LearningBlazor.Client.DataPoint.State.DataPointConnectionData? DeserializeIListDataPoints_ListDataPoints(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DataPointConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::LearningBlazor.Client.DataPoint.State.DataPointConnectionData(typename, items: DeserializeIListDataPoints_ListDataPoints_ItemsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "items")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::LearningBlazor.Client.DataPoint.State.DataPointData?>? DeserializeIListDataPoints_ListDataPoints_ItemsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var dataPoints = new global::System.Collections.Generic.List<global::LearningBlazor.Client.DataPoint.State.DataPointData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                dataPoints.Add(DeserializeIListDataPoints_ListDataPoints_Items(child));
            }

            return dataPoints;
        }

        private global::LearningBlazor.Client.DataPoint.State.DataPointData? DeserializeIListDataPoints_ListDataPoints_Items(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DataPoint", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::LearningBlazor.Client.DataPoint.State.DataPointData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), createdAt: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), @value: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class DataPointData
    {
        public DataPointData(global::System.String __typename, global::System.String? name = default !, global::System.String? createdAt = default !, global::System.Int32? @value = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            CreatedAt = createdAt;
            Value = @value;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }

        public global::System.String? CreatedAt { get; }

        public global::System.Int32? Value { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class DataPointConnectionData
    {
        public DataPointConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::LearningBlazor.Client.DataPoint.State.DataPointData?>? items = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Items = items;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::LearningBlazor.Client.DataPoint.State.DataPointData?>? Items { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class DataPointClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class DataPointClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public DataPointClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public static partial class DataPointClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::LearningBlazor.Client.DataPoint.State.DataPointClientStoreAccessor> AddDataPointClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::LearningBlazor.Client.DataPoint.State.DataPointClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::LearningBlazor.Client.DataPoint.CreateDataPointMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::LearningBlazor.Client.DataPoint.ListDataPointsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::LearningBlazor.Client.DataPoint.DataPointClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::LearningBlazor.Client.DataPoint.IDataPointClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::LearningBlazor.Client.DataPoint.State.DataPointClientStoreAccessor>("DataPointClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("DataPointClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("AWSDateTime"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::LearningBlazor.Client.DataPoint.CreateDataPointInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::LearningBlazor.Client.DataPoint.ICreateDataPointResult>, global::LearningBlazor.Client.DataPoint.State.CreateDataPointResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::LearningBlazor.Client.DataPoint.ICreateDataPointResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::LearningBlazor.Client.DataPoint.ICreateDataPointMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::LearningBlazor.Client.DataPoint.ICreateDataPointResult>, global::LearningBlazor.Client.DataPoint.State.CreateDataPointBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::LearningBlazor.Client.DataPoint.ICreateDataPointResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::LearningBlazor.Client.DataPoint.ICreateDataPointResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::LearningBlazor.Client.DataPoint.ICreateDataPointResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::LearningBlazor.Client.DataPoint.CreateDataPointMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::LearningBlazor.Client.DataPoint.ICreateDataPointMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::LearningBlazor.Client.DataPoint.CreateDataPointMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::LearningBlazor.Client.DataPoint.IListDataPointsResult>, global::LearningBlazor.Client.DataPoint.State.ListDataPointsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::LearningBlazor.Client.DataPoint.IListDataPointsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::LearningBlazor.Client.DataPoint.IListDataPointsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::LearningBlazor.Client.DataPoint.IListDataPointsResult>, global::LearningBlazor.Client.DataPoint.State.ListDataPointsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::LearningBlazor.Client.DataPoint.IListDataPointsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::LearningBlazor.Client.DataPoint.IListDataPointsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::LearningBlazor.Client.DataPoint.IListDataPointsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::LearningBlazor.Client.DataPoint.ListDataPointsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::LearningBlazor.Client.DataPoint.IListDataPointsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::LearningBlazor.Client.DataPoint.ListDataPointsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::LearningBlazor.Client.DataPoint.State.DataPointClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::LearningBlazor.Client.DataPoint.DataPointClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::LearningBlazor.Client.DataPoint.IDataPointClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::LearningBlazor.Client.DataPoint.DataPointClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
