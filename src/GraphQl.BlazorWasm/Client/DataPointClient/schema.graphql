schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  getDataPoint(name: ID!): DataPoint
  listDataPoints(filter: TableDataPointFilterInput limit: Int nextToken: String): DataPointConnection
}

type DataPoint {
  name: ID!
  createdAt: AWSDateTime!
  value: Int
}

"The `AWSDateTime` scalar type provided by AWS AppSync, represents a valid ***extended*** [ISO 8601 DateTime](https:\/\/en.wikipedia.org\/wiki\/ISO_8601#Combined_date_and_time_representations) string. In other words, this scalar type accepts datetime strings of the form `YYYY-MM-DDThh:mm:ss.SSSZ`.  The scalar can also accept \"negative years\" of the form `-YYYY` which correspond to years before `0000`. For example, \"**-2017-01-01T00:00Z**\" and \"**-9999-01-01T00:00Z**\" are both valid datetime strings.  The field after the two digit seconds field is a nanoseconds field. It can accept between 1 and 9 digits. So, for example, \"**1970-01-01T12:00:00.2Z**\", \"**1970-01-01T12:00:00.277Z**\" and \"**1970-01-01T12:00:00.123456789Z**\" are all valid datetime strings.  The seconds and nanoseconds fields are optional (the seconds field must be specified if the nanoseconds field is to be used).  The [time zone offset](https:\/\/en.wikipedia.org\/wiki\/ISO_8601#Time_zone_designators) is compulsory for this scalar. The time zone offset must either be `Z` (representing the UTC time zone) or be in the format `±hh:mm:ss`. The seconds field in the timezone offset will be considered valid even though it is not part of the ISO 8601 standard."
scalar AWSDateTime

type DataPointConnection {
  items: [DataPoint]
  nextToken: String
}

input TableDataPointFilterInput {
  name: TableIDFilterInput
  createdAt: TableStringFilterInput
  value: TableIntFilterInput
}

input TableIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

type Mutation {
  createDataPoint(input: CreateDataPointInput!): DataPoint
  updateDataPoint(input: UpdateDataPointInput!): DataPoint
  deleteDataPoint(input: DeleteDataPointInput!): DataPoint
}

input CreateDataPointInput {
  name: ID!
  createdAt: AWSDateTime!
  value: Int
}

input UpdateDataPointInput {
  name: ID!
  createdAt: AWSDateTime
  value: Int
}

input DeleteDataPointInput {
  name: ID!
}

type Subscription {
  onCreateDataPoint(name: ID createdAt: AWSDateTime value: Int): DataPoint
  @aws_subscribe(mutations: ["createDataPoint"])
  onUpdateDataPoint(name: ID createdAt: AWSDateTime value: Int): DataPoint
  onDeleteDataPoint(name: ID createdAt: AWSDateTime value: Int): DataPoint
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

"Tells the service this field\/object has access authorized by a Lambda Authorizer."
directive @aws_lambda on OBJECT | FIELD_DEFINITION

"Tells the service this field\/object has access authorized by a Cognito User Pools token."
directive @aws_cognito_user_pools("List of cognito user pool groups which have access on this field" cognito_groups: [String]) on OBJECT | FIELD_DEFINITION

"Tells the service this field\/object has access authorized by an OIDC token."
directive @aws_oidc on OBJECT | FIELD_DEFINITION

"Tells the service which subscriptions will be published to when this mutation is called. This directive is deprecated use @aws_susbscribe directive instead."
directive @aws_publish("List of subscriptions which will be published to when this mutation is called." subscriptions: [String]) on FIELD_DEFINITION

"Tells the service this field\/object has access authorized by an API key."
directive @aws_api_key on OBJECT | FIELD_DEFINITION

"Directs the schema to enforce authorization on a field"
directive @aws_auth("List of cognito user pool groups which have access on this field" cognito_groups: [String]) on FIELD_DEFINITION

"Tells the service this field\/object has access authorized by sigv4 signing."
directive @aws_iam on OBJECT | FIELD_DEFINITION

"Tells the service which mutation triggers this subscription."
directive @aws_subscribe("List of mutations which will trigger this subscription when they are called." mutations: [String]) on FIELD_DEFINITION